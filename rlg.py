# -*- coding: utf-8 -*-
"""Rlg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DEfUtTuxOGaghIHaEO_1t3aHIwsIDabN
"""

#!pip install flask_restful
#!pip install flask_ngrok

from flask import Flask, jsonify, request
from flask_restful import Api, Resource
#from flask_ngrok import run_with_ngrok
import math

app = Flask(__name__)
api = Api(app)
#run_with_ngrok(app)

def checkPostedData(postedData, operacao):
  if operacao in ['soma','subtracao','divisao','multiplicacao','pow']:
    if "x" not in postedData or "y" not in postedData:
      return 301
    return 200
  else:
    if "x" not in postedData and "y" not in postedData:
        return 301
    return 200

class Add(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, "soma")
      if status_code != 200:
        retJson = {
            "Message" : "Operadores faltando para a operaçao de adiçao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      y = postedData["y"]
      x = float(x)
      y = float(y)


      ret = x+y
      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Subtract(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, "subtracao")
      if status_code != 200:
        retJson = {
            "Message" : "Operadores faltando para a operaçao de subtraçao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      y = postedData["y"]
      x = float(x)
      y = float(y)


      ret = x-y
      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Multiply(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,"multiplicacao")
      if status_code != 200:
        retJson = {
            "Message" : "Operadores faltando para a operaçao de multiplicaçao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      y = postedData["y"]
      x = float(x)
      y = float(y)


      ret = x*y
      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Divide(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, "divisao")
      if status_code != 200:
        retJson = {
            "Message" : "Operadores faltando para a operaçao de divisao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      y = postedData["y"]
      x = float(x)
      y = float(y)


      if y == 0:
        ret = "Divisao por 0"
      else:
        ret = x/y

      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})
    
class Exponential(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, 'exp')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao de expoenciacao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.exp(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Pow(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, "pow")
      if status_code != 200:
        retJson = {
            "Message" : "Operadores faltando para a operaçao de potenciaçao",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      y = postedData["y"]
      x = int(x)
      y = int(y)


      ret = math.pow(x, y)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Log(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, 'log')
      if status_code != 200:
        retJson = {
            "Message" : "Operador(es) faltando para a operaçao de log",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      try:
        y = postedData['y']
        y = float(y)
        if y <=0 or y ==1:
          ret = "Y(base) tem que ser maior que 0 e diferente de 1"
        elif x <= 0:
          ret= "X(logaritimando) tem que ser maior que 0"
        else:
          ret = math.log(x,y)

      except:
        if x <=0:
          ret = "X(logaritimando) tem que ser maior que 0 e diferente de 1"
        else:
          ret = math.log(x)

      retMap  = {
         "Message" : ret,
          "Status Code": 200}

      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Seno(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, 'seno')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao seno",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.sin(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class Cosseno(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, 'cosseno')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao cosseno",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.cos(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class Tan(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData, 'tangente')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao tangente",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.tan(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class ACosseno(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arcosseno')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao de arcosseno",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x<-1 or x>1:
        ret = "Dominio do Arcosseno é [-1,1]"
      else:
        ret = math.acos(x)

      retMap  = {
        "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class ASeno(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arcseno')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao de arco seno",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x<-1 or x>1:
        ret = "Dominio do Arco seno é [-1,1]"
      else:
        ret = math.asin(x)

      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class ATan(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arctangente')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao arctangente",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.atan(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class Senoh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'senoh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao seno hiperbolico",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x>700 or x<-700:
        ret = "Número muito grande, entre com um número abaixo de 700 ou maior que -700"
      else:
        ret = math.sinh(x)

      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class Cossenoh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'cossenoh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a funçao cosseno hiperbólico",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x>700 or x<-700:
        ret = "Número muito grande, entre com um número abaixo de 700 ou maior que -700"
      else:
        ret = math.cosh(x)  
  
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class Tanh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'tangenteh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a funçao tangente hiperbólica",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.tanh(x)
      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

      x = postedData["x"]
      x = float(x)

class ASenoh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arcsenoh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a funçao arc seno hiperbólico",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      ret = math.asinh(x)
      retMap  = {
        "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

class ACossenoh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arcossenoh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao arcosseno hiperbólico",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x<1:
        ret = "Domínio de Cosseno hiperbólico só está definido para x>=1"
      else:
        ret = math.acosh(x)

      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

class ATanh(Resource):
  def post(self):
    try:
      #postedData = request.get_Json(force = True)
      postedData = request.json

      status_code  = checkPostedData(postedData,'arctanh')
      if status_code != 200:
        retJson = {
            "Message" : "Operador faltando para a operaçao arco tangente hiperbólico",
            "Status Code": status_code
        }
        return jsonify(retJson)

      x = postedData["x"]
      x = float(x)

      if x>0.99 or x< -0.99:
        ret = "Arco Tangente hiperbólico só está definido para [-0.99,0.99]"
      else:
        ret = math.atanh(x)

      retMap  = {
         "Message" : ret,
          "Status Code": 200}
      return jsonify(retMap)

    except:
      return jsonify({"Message":"Algo"})

      x = postedData["x"]
      x = float(x)

      x = postedData["x"]
      x = float(x)

api.add_resource(Add, "/add")
api.add_resource(Subtract, "/subtract")
api.add_resource(Multiply, "/multiply")
api.add_resource(Divide, "/divide")
api.add_resource(Exponential, "/exponential")
api.add_resource(Log, "/log")
api.add_resource(Pow, "/pow")


api.add_resource(Seno, "/seno")
api.add_resource(Cosseno, "/cosseno")
api.add_resource(Tan, "/tan")

api.add_resource(ASeno, "/aseno")
api.add_resource(ACosseno, "/acosseno")
api.add_resource(ATan, "/atan")

api.add_resource(Senoh, "/senoh")
api.add_resource(Cossenoh, "/cossenoh")
api.add_resource(Tanh, "/tanh")

api.add_resource(ASenoh, "/asenoh")
api.add_resource(ACossenoh, "/acossenoh")
api.add_resource(ATanh, "/atanh")

@app.route('/', methods=['GET', 'POST'])
def hello_world():
  return "Hello World!"



if __name__ == '__main__':
  app.run()
